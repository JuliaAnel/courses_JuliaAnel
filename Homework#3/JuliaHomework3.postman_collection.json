{
	"info": {
		"_postman_id": "ae51b267-595d-4b17-a06f-9c15a9ef08e8",
		"name": "JuliaHomework3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", response.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Julia",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": { \"type\": \"object\",\r",
							"            \"properties\":{\r",
							"                \"u_age\": {\"type\": \"integer\"},\r",
							"                \"u_name\": { \"type\": \"array\", \"minItems\": 1, \"maxItems\": 3, \r",
							"                    \"items\": [\r",
							"                        {\"type\": \"string\"},\r",
							"                        {\"type\": \"integer\"},\r",
							"                        {\"type\": \"integer\"}\r",
							"                    ] \r",
							"                },\r",
							"                \"u_salary_1_5_year\": { \"type\": \"integer\" }\r",
							"            },\r",
							"            \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"] \r",
							"        },\r",
							"    \"qa_salary_after_12_months\": { \"type\": \"integer\" },\r",
							"    \"qa_salary_after_6_months\": { \"type\": \"integer\" },\r",
							"    \"start_qa_salary\": { \"type\": \"integer\" }    \r",
							"    },\r",
							"    \"required\": [\"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"]  \r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"let req = JSON.parse(request.data);\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"})\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(req.salary*2.9);\r",
							"})\r",
							"\r",
							"pm.test(\"salary\", () => {\r",
							"    pm.expect(response.person.u_salary_1_5_year).to.eql(req.salary * 4);\r",
							"pm.variables.get(\"variable_key\");\r",
							"})\r",
							"\r",
							"let sendreq = {\r",
							"    url: \"http://162.55.220.72:5005/get_test_user\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"formdata\", \r",
							"        formdata:[\r",
							"        {key: \"auth_token\", value: pm.environment.get(\"token\"), disabled: false},\r",
							"        {key: \"name\", value: pm.environment.get(\"name\"), disabled: false},\r",
							"        {key: \"age\", value: pm.environment.get(\"age\"), disabled: false},\r",
							"        {key: \"salary\", value: response.person.u_salary_1_5_year, disabled: false}]}\r",
							"}\r",
							"\r",
							"pm.sendRequest(sendreq, function(err, res){\r",
							"    console.log(res);\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"{{age}}\",\r\n    \"salary\": \"{{salary}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"auth_token\": \"{{token}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"        \"type\": \"integer\"\r",
							"        },\r",
							"    \"name\": {\r",
							"        \"type\": \"string\"\r",
							"        },\r",
							"    \"salary\": {\r",
							"        \"type\": \"array\", \"minItems\": 1, \"maxItems\": 3, \r",
							"                    \"items\": [\r",
							"                          {\"type\": \"integer\"},\r",
							"                          {\"type\": \"string\"},\r",
							"                          {\"type\": \"string\"}\r",
							"                                 ]\r",
							"                                 }\r",
							"                                  },\r",
							"                                      \"required\": [\r",
							"                                    \"age\",\r",
							"                                \"name\",\r",
							"                             \"salary\"\r",
							"    \r",
							"                    ]\r",
							"                \r",
							"            \r",
							"        };\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"let req = request.data;\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"salary\", () => {\r",
							"    pm.expect(+response.salary[1]).to.eql(req.salary*2);\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"salary\", () => {\r",
							"    pm.expect(+response.salary[2]).to.eql(req.salary*3);\r",
							"})\r",
							"\r",
							"if(+response.salary[2] > +response.salary[1] && response.salary[0]){\r",
							"    console.log(\"2-ой элемент массива больше 1-го и нулевого!\")}\r",
							"    else{\r",
							"  console.log(\"2-ой элемент массива не больше 1-го и нулевого\")\r",
							"    }\r",
							"    //второй вариант сравнения элнментов массива\r",
							"  pm.test(\"2-ой элемент массива больше 1-го и нулевого!\", () => {\r",
							"     pm.expect(+response.salary[2]).to.greaterThan(+response.salary[1]).and.to.greaterThan(response.salary[0]);\r",
							"  })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"     \"type\": \"object\",\r",
							"      \"properties\": \r",
							"             {\r",
							"             \"age\": {\r",
							"                 \"type\": \"integer\"\r",
							"                      },\r",
							"                      \"daily_food\": {\r",
							"                     \"type\": \"number\"\r",
							"                       },\r",
							"                     \"daily_sleep\": {\r",
							"                    \"type\": \"number\"\r",
							"                  },\r",
							"                 \"name\": {\r",
							"               \"type\": \"string\"\r",
							"              } \r",
							"              },\r",
							"          \"required\": [\r",
							"        \"age\",\r",
							"             \"daily_food\",\r",
							"                \"daily_sleep\",\r",
							"                     \"name\"  \r",
							"                              ],\r",
							"    }\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"let req = request.data;\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"dayily_food = weight * 0.012 \", function () {\r",
							"    pm.expect(response.daily_food).to.eql(req.weight*0.012);\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"daily_sleep = weight * 2.5\", function () {\r",
							"    pm.expect(response.daily_sleep).to.eql(req.weight*2.5);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"let req = request.data;\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(response.name).to.eql(pm.environment.get(\"name\"));\r",
							"})\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(Number(response.age)).to.eql(pm.environment.get(\"age\"));\r",
							"})\r",
							"console.log(typeof pm.environment.get(\"weight\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"//let item = response[Math.floor(Math.random()*response.length)];\r",
							"//console.log(item);\r",
							"//pm.environment.set(\"Cur_ID\", item.Cur_ID);\r",
							"function getRandomint (max) {\r",
							"    return Math.floor(Math.random() * max)\r",
							"}\r",
							"const randomCurrId = getRandomint(response.length-1)\r",
							"pm.environment.set(\"Cur_ID\", response[randomCurrId].Cur_ID)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"     \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}